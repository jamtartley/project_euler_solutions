"""
Project Euler 12

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""

import itertools
import operator
import functools

def isPrime(number):
    """
    Check if the given number is prime
    """
    for x in range(2, number):
        if (number % x == 0):
            return False

    return True

def getNextPrime(prev):
    next = prev + 1

    while(not isPrime(next)):
        next += 1

    return next

def getPrimeDivisors(number):
    divisors = []
    currentDivisor = 2

    while(number != 1):
        if (number % currentDivisor == 0):
            number /= currentDivisor
            divisors.append(currentDivisor)
        else:
            currentDivisor = getNextPrime(currentDivisor)

    return divisors

def getPrimeCounts(divisorList):
    return [(factor, divisorList.count(factor)) for factor in set(divisorList)]

def getPrimeFactorExpValues(factorisedList):
    return [[(factor ** n) for n in range(exp + 1)] for (factor, exp) in factorisedList]

def getAllDivisors(postExpList):
    divisors = []
    for element in itertools.product(*postExpList):
        divisors.append(element)

    return sorted(set([functools.reduce(operator.mul, subl) for subl in divisors]))

def getTriangle(number):
    return sum(int(x) for x in range(number))

triangleIndex = 5

while(len(getAllDivisors(getPrimeFactorExpValues(getPrimeCounts(getPrimeDivisors(getTriangle(triangleIndex)))))) < 500):
    triangleIndex += 1

print(getTriangle(triangleIndex))
